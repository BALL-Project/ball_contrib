# -----------------------------------------------------------------------------
# CONTRIB FRAMEWORK
#
# Based on CMake ExternalProjects, this repository offers functionality
# to configure, build, and install software dependencies that can be used
# by other projects.
#
# It has been developed in course of the open source
# research software BALL (Biochemical ALgorithms Library).
#
#
# Copyright 2016, the BALL team (http://www.ball-project.org)
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING
# INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------


# Check Python
SET(Python_ADDITIONAL_VERSIONS 2.7 2.6)

INCLUDE(FindPythonLibs)
IF(NOT PYTHONLIBS_FOUND)
	MESSAGE(FATAL_ERROR "No python libraries found. Required to build SIP.")
ENDIF()

INCLUDE(FindPythonInterp)
IF(NOT PYTHONINTERP_FOUND)
	MESSAGE(FATAL_ERROR "No python interpreter found. Required to build SIP.")
ENDIF()

EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import struct; print struct.calcsize(\"P\") * 8"
		OUTPUT_VARIABLE PYTHON_BITSIZE
		)

IF(NOT ${PYTHON_BITSIZE} MATCHES "${CONTRIB_ADDRESSMODEL}.*")
	MESSAGE(FATAL_ERROR "Python was built for a different address model. Please install appropriate version.")
ENDIF()


# SIP configuration
SET(SIP_CONFIGURE_OPTIONS "")
IF("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	LIST(APPEND SIP_CONFIGURE_OPTIONS "-u")
ENDIF()

IF(MSVC)
	SET(SIP_BUILD_COMMAND nmake)
	SET(SIP_INSTALL_COMMAND "")
ELSE()
	SET(SIP_BUILD_COMMAND ${MAKE_COMMAND})
	SET(SIP_INSTALL_COMMAND ${MAKE_INSTALL_COMMAND})

	LIST(APPEND SIP_CONFIGURE_OPTIONS -b "${CONTRIB_INSTALL_BIN}" -d "${CONTRIB_INSTALL_LIB}" -e "${CONTRIB_INSTALL_INC}")
ENDIF()


# Package branch to clone/download from the BALL-Contrib repository
SET(GIT_BRANCH "master")


ExternalProject_Add(${PACKAGE}

	PREFIX ${PROJECT_BINARY_DIR}
	DOWNLOAD_COMMAND ""
	BUILD_IN_SOURCE ${CUSTOM_BUILD_IN_SOURCE}

	LOG_DOWNLOAD ${CUSTOM_LOG_DOWNLOAD}
	LOG_UPDATE ${CUSTOM_LOG_UPDATE}
	LOG_CONFIGURE ${CUSTOM_LOG_CONFIGURE}
	LOG_BUILD ${CUSTOM_LOG_BUILD}
	LOG_INSTALL ${CUSTOM_LOG_INSTALL}

	CONFIGURE_COMMAND ${PYTHON_EXECUTABLE} configure.py ${SIP_CONFIGURE_OPTIONS}
	BUILD_COMMAND ${SIP_BUILD_COMMAND}
	INSTALL_COMMAND "${SIP_INSTALL_COMMAND}"
)

# Add custom install step for Windows
IF(MSVC)
	ExternalProject_Add_Step(${PACKAGE} custom_install

		LOG 1
		DEPENDEES build

		WORKING_DIRECTORY "${CONTRIB_BINARY_SRC}"

		COMMAND ${CMAKE_COMMAND} -E copy ${PACKAGE}/sipgen/sip.exe ${CONTRIB_INSTALL_BIN}
		COMMAND ${CMAKE_COMMAND} -E copy ${PACKAGE}/siplib/sip.h ${CONTRIB_INSTALL_INC}
		COMMAND ${CMAKE_COMMAND} -E copy ${PACKAGE}/siplib/sip.pyd ${CONTRIB_INSTALL_LIB}
		COMMAND ${CMAKE_COMMAND} -E copy ${PACKAGE}/siplib/sip.lib ${CONTRIB_INSTALL_LIB}

		DEPENDERS install
	)
ENDIF()
